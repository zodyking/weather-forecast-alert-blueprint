blueprint:
  name: Weather — Forecast TTS (AI Optional)
  description: |
    Speak a concise, TV-weatherman-style forecast to one or more speakers on a schedule.
    Pulls daily + hourly forecasts, mentions likely rain/snow with daypart and %, and (optionally) rewrites via an AI Task without changing facts.

    Tips:
    • Use a weather entity that supports `weather.get_forecasts` (daily + hourly).
    • Tune “Precipitation probability threshold” and “Hours ahead” to control precip mentions.
    • Turn off “Use AI rewrite” to speak the raw crafted message.

  domain: automation
  source_url: https://github.com/zodyking/oil-diffuser-blueprint/blob/main/oil-diffuser-ai.yaml

  input:
    weather_entity:
      name: Weather entity (with forecast)
      description: |
        Weather entity to read from. Must support `weather.get_forecasts` for both **daily** and **hourly** data.
        Examples: `weather.home`, `weather.forecast_home`. If unsupported/unavailable, you may hear “Forecast not available.”
      selector:
        entity:
          domain: weather

    hour_pattern:
      name: Trigger — hour pattern
      description: |
        Which hours this runs (time_pattern hour):
        • `/1` every hour (recommended) • `/2` every 2 hours • `9` only at 9 AM.
        Works together with “minute of hour,” active window, and weekdays.
      default: "/1"
      selector:
        text: {}

    minute_mark:
      name: Trigger — minute of hour
      description: |
        Minute within each eligible hour (string `00`–`59`). Example `"3"` → runs at `HH:03`.
        Use different minute marks to stagger multiple automations.
      default: "3"
      selector:
        text: {}

    start_time:
      name: Active from (time)
      description: |
        Start of the daily active window (local). Automation runs **after** this time and before “Active until.”
        Example: `09:00:00`.
      default: "09:00:00"
      selector:
        time: {}

    end_time:
      name: Active until (time)
      description: |
        End of the daily active window (local). Automation runs **before** this time.
        Keep this later than “Active from.” Example: `22:00:00`.
      default: "22:00:00"
      selector:
        time: {}

    weekdays:
      name: Active weekdays
      description: |
        Days allowed to run. Choose any set (e.g., Mon–Fri for commute, or all seven).
        Must include at least one day or nothing will run.
      default: [sun, mon, tue, wed, thu, fri, sat]
      selector:
        select:
          multiple: true
          mode: list
          options: [sun, mon, tue, wed, thu, fri, sat]

    precip_threshold:
      name: Precipitation probability threshold (%)
      description: |
        Minimum hourly `precipitation_probability` within the scan window required to mention rain/snow.
        Example: `40` → announce only if any hour has ≥40%. Set `0` to mention any predicted precip.
      default: 40
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"

    hours_ahead:
      name: Hours ahead to scan for precip
      description: |
        How many upcoming hours (1–48) to scan for precipitation probability. Typical: 12–24.
        Larger windows catch more, but may be less relevant to immediate plans.
      default: 24
      selector:
        number:
          min: 1
          max: 48
          step: 1

    enable_ai:
      name: Use AI rewrite
      description: |
        If **on**, the crafted message is sent to your **AI Task** entity for a concise broadcast-style rewrite.
        If **off**, the raw crafted message is spoken (no AI call).
      default: true
      selector:
        boolean: {}

    ai_task_entity:
      name: AI Task entity
      description: |
        AI Task entity to process the rewrite (e.g., `ai_task.google_ai_task_2`). Required only if “Use AI rewrite” is on.
        The blueprint calls `ai_task.generate_data` with your instructions and the built message.
      selector:
        entity:
          domain: ai_task

    ai_instructions:
      name: AI rewrite instructions
      description: |
        System prompt sent to the AI Task. The original weather text is appended after this under “Message:”.
        The default enforces exact facts, raw text output, and brevity for clean TTS.
      default: |
        Rewrite the message below for clear, natural TTS in a crisp TV-meteorologist voice.

        Hard rules:
        • Preserve every fact exactly: all numbers, units (°, %, mph), times, day names, and weather terms.
        • Do not invent, omit, reorder, round, or restate any facts. Keep original sequencing of info.
        • Output RAW TEXT ONLY — no quotes, code fences, YAML/JSON, greetings, preambles, or sign-offs.
        • 2–4 short sentences, ≤55 words, plain vocabulary, no emojis, no hashtags, no ALL CAPS.
        • If precipitation timing/probability exists, mention it once using the same daypart/time and %; otherwise omit.
        • Keep symbols and formatting as given (°, %, AM/PM). If the input is “Forecast not available.” return it unchanged.
      selector:
        text:
          multiline: true

    tts_engine:
      name: TTS engine entity
      description: |
        TTS platform entity for `tts.speak` (e.g., `tts.piper`). Some engines ignore the `voice` option.
        If unsupported, nothing will be spoken.
      selector:
        entity:
          domain: tts

    speakers:
      name: Speaker(s)
      description: |
        One or more `media_player` entities that will play the TTS. Volume is set on all speakers before speaking,
        then the message is spoken to each speaker individually. For groups, target the group entity.
      selector:
        entity:
          domain: media_player
          multiple: true

    pre_speak_volume:
      name: Pre-speak volume level
      description: |
        Volume (0.00–1.00) applied via `media_player.volume_set` immediately before speaking.
        Use to ensure audibility. Set your preferred steady level here if you don’t want volume fluctuations.
      default: 0.6
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
          mode: slider

    tts_cache:
      name: Cache TTS audio
      description: |
        If **on**, allows the TTS engine to reuse audio for identical messages (when supported), reducing latency.
      default: true
      selector:
        boolean: {}

    tts_voice:
      name: TTS voice (if supported)
      description: |
        Voice identifier for your TTS engine (e.g., Piper `en_US-carlin-high`). Engines that don’t support voice selection
        will ignore this.
      default: "en_US-carlin-high"
      selector:
        text: {}

mode: single

triggers:
  - trigger: time_pattern
    hours: !input hour_pattern
    minutes: !input minute_mark

conditions:
  - condition: time
    after: !input start_time
    before: !input end_time
    weekday: !input weekdays

actions:
  - action: weather.get_forecasts
    target:
      entity_id: !input weather_entity
    data:
      type: daily
    response_variable: d

  - action: weather.get_forecasts
    target:
      entity_id: !input weather_entity
    data:
      type: hourly
    response_variable: h

  - variables:
      key: !input weather_entity
      precip_threshold: !input precip_threshold
      hours_ahead: !input hours_ahead

      now_hour: "{{ now().hour }}"
      day_name: "{{ (now() | as_timestamp | timestamp_custom('%A', true)) }}"
      greeting: >-
        {% if 5 <= now_hour <= 11 %}Good morning{% elif 12 <= now_hour <= 17 %}
        Good afternoon{% else %}Good evening{% endif %}

      now_temp: "{{ state_attr(key,'temperature') }}"
      now_hum: "{{ state_attr(key,'humidity') }}"
      now_cond_h: >-
        {% set s = (states(key) or '') | lower %}
        {% set s = s | replace('_',' ') | replace('-',' ') %}
        {% set s = s | replace('partlycloudy','partly cloudy') | replace('clearnight','clear night') %}
        {{ s | trim }}

      daily_list: "{{ d.get(key,{}).get('forecast',[]) }}"
      today: "{{ daily_list[0] if daily_list|length>0 else dict() }}"
      high: "{{ today.get('temperature') }}"
      low: "{{ today.get('templow', today.get('temperature_low')) }}"
      today_cond_h: >-
        {% set raw = (today.get('condition') or states(key) or '') | lower %}
        {% set s = raw | replace('_',' ') | replace('-',' ') %}
        {% set s = s | replace('partlycloudy','partly cloudy') | replace('clearnight','clear night') %}
        {{ s | trim }}

      now_norm: "{{ now_cond_h | replace(' ','') }}"
      today_norm: "{{ today_cond_h | replace(' ','') }}"
      mention_expect: "{{ today_cond_h != '' and today_norm != now_norm }}"

      hourly_list: "{{ h.get(key,{}).get('forecast',[]) }}"
      next_hours: "{{ hourly_list[:hours_ahead] if hourly_list else [] }}"
      hits: >-
        {{ (next_hours
            | selectattr('precipitation_probability','defined')
            | selectattr('precipitation_probability','ge', precip_threshold)
            | list) }}
      first_hit: "{{ hits[0] if hits|length>0 else dict() }}"
      hit_pp: "{{ first_hit.get('precipitation_probability') }}"
      hit_cond_h: >-
        {% set raw = (first_hit.get('condition','') | lower) %}
        {% set s = raw | replace('_',' ') | replace('-',' ') %}
        {% set s = s | replace('partlycloudy','partly cloudy') | replace('clearnight','clear night') %}
        {{ s | trim }}
      hit_ts: >-
        {% set t = none %}
        {% if first_hit.get('datetime') %}
          {% set t = as_datetime(first_hit.get('datetime')) | as_timestamp %}
        {% endif %}
        {{ t }}
      hit_clock: >-
        {% set out = '' %}
        {% if hit_ts is not none %}
          {% set out = (hit_ts | timestamp_custom('%I %p', true)) | replace(' 0',' ') %}
        {% endif %}
        {{ out }}
      hit_hour_num: >-
        {% set out = 0 %}
        {% if hit_ts is not none %}
          {% set out = (hit_ts | timestamp_custom('%H', true)) | int %}
        {% endif %}
        {{ out }}
      hit_daypart: >-
        {% set hnum = hit_hour_num %}
        {% if 5 <= hnum <= 11 %}this morning{% elif 12 <= hnum <= 17 %}this afternoon
        {% elif 18 <= hnum <= 22 %}this evening{% else %}overnight{% endif %}

      precip_kind: >-
        {% if 'snow' in hit_cond_h %}snow{% elif 'sleet' in hit_cond_h or 'hail' in hit_cond_h %}mixed precipitation
        {% elif hit_cond_h %}rain{% else %}precipitation{% endif %}

      msg: >-
        {% set p = [] %}
        {% set p = p + [greeting ~ '! ' ~ day_name ~ "'s forecast."] %}

        {% set now_bits = [] %}
        {% if now_cond_h %}{% set now_bits = now_bits + [now_cond_h | capitalize] %}{% endif %}
        {% if now_temp is not none %}{% set now_bits = now_bits + [ (now_temp | round(0) ~ '°') ] %}{% endif %}
        {% if now_hum  is not none %}{% set now_bits = now_bits + [ ('humidity ' ~ now_hum ~ '%') ] %}{% endif %}
        {% if now_bits | length > 0 %}{% set p = p + ['Right now: ' ~ (now_bits | join(', ')) ~ '.'] %}{% endif %}

        {% set today_bits = [] %}
        {% if mention_expect %}{% set today_bits = today_bits + ['Expect ' ~ today_cond_h ~ '.'] %}{% endif %}
        {% if high is not none %}{% set today_bits = today_bits + ['High ' ~ (high | round(0)) ~ '°.'] %}{% endif %}
        {% if low  is not none %}{% set today_bits = today_bits + ['Low '  ~ (low  | round(0)) ~ '°.'] %}{% endif %}
        {% if today_bits | length > 0 %}{% set p = p + [ today_bits | join(' ') ] %}{% endif %}

        {% if hits | length > 0 and hit_pp is not none %}
          {% set phr = precip_kind ~ ' chances ' ~ hit_daypart %}
          {% if hit_clock %}{% set phr = phr ~ ' around ' ~ hit_clock %}{% endif %}
          {% set phr = phr ~ ': ' ~ (hit_pp | int) ~ '%.' %}
          {% set p = p + [ phr ] %}
        {% endif %}

        {{ p | join(' ') if p|length > 0 else 'Forecast not available.' }}

      # convenience
      i_ai: !input enable_ai
      i_ai_task: !input ai_task_entity
      i_ai_text: !input ai_instructions

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ i_ai and (i_ai_task | default('') | string) != '' }}"
        sequence:
          - action: ai_task.generate_data
            data:
              entity_id: !input ai_task_entity
              task_name: weather message
              instructions: |-
                {{ i_ai_text }}

                Message:
                "{{ msg | replace('"','\\"') }}"
            response_variable: aimsg
          - variables:
              spoken: "{{ aimsg.data | default(msg) }}"
    default:
      - variables:
          spoken: "{{ msg }}"

  - action: media_player.volume_set
    target:
      entity_id: !input speakers
    data:
      volume_level: !input pre_speak_volume

  - repeat:
      for_each: !input speakers
      sequence:
        - action: tts.speak
          target:
            entity_id: !input tts_engine
          data:
            cache: !input tts_cache
            media_player_entity_id: "{{ repeat.item }}"
            message: "{{ spoken | trim }}"
            options:
              voice: !input tts_voice
